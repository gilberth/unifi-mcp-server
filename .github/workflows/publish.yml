name: Build and Publish to NPM

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript compilation
      run: npm run build
      
    - name: Run tests (if available)
      run: npm test --if-present
      
    - name: Validate MCP server
      run: |
        # Verificar que el servidor se puede inicializar
        timeout 10s node dist/index.js || true
        echo "MCP server validation completed"

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Check if version changed
      id: version-check
      run: |
        # Obtener la versión actual del package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Verificar si esta versión ya existe en npm
        if npm view unifi-mcp-server@$CURRENT_VERSION version 2>/dev/null; then
          echo "version_exists=true" >> $GITHUB_OUTPUT
          echo "Version $CURRENT_VERSION already exists in npm"
        else
          echo "version_exists=false" >> $GITHUB_OUTPUT
          echo "Version $CURRENT_VERSION is new, will publish"
        fi
        
    - name: Publish to npm
      if: steps.version-check.outputs.version_exists == 'false'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      if: steps.version-check.outputs.version_exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version-check.outputs.current_version }}
        release_name: Release v${{ steps.version-check.outputs.current_version }}
        body: |
          ## UniFi MCP Server v${{ steps.version-check.outputs.current_version }}
          
          ### 🚀 Nuevas Funcionalidades
          - Gestión avanzada de QoS (Quality of Service)
          - Administración de clientes VPN
          - Configuración de Port Forwarding
          - Gestión de rutas de tráfico
          - Políticas avanzadas de Firewall
          
          ### 📦 Instalación
          ```bash
          npm install -g unifi-mcp-server@${{ steps.version-check.outputs.current_version }}
          ```
          
          ### 📋 Herramientas Disponibles
          - **QoS:** 2 herramientas
          - **VPN:** 2 herramientas  
          - **Port Forwarding:** 2 herramientas
          - **Traffic Routes:** 2 herramientas
          - **Advanced Firewall:** 2 herramientas
          
          **Total:** 24 herramientas para gestión completa de redes UniFi
          
          Para más información, consulta la [documentación completa](https://github.com/gilberth/unifi-mcp-server/blob/main/README.md).
        draft: false
        prerelease: false
        
    - name: Skip publish (version exists)
      if: steps.version-check.outputs.version_exists == 'true'
      run: |
        echo "⚠️ Version ${{ steps.version-check.outputs.current_version }} already exists in npm"
        echo "💡 To publish a new version, update the version in package.json"
        echo "   Example: npm version patch|minor|major"